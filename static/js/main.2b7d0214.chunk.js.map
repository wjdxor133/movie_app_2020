{"version":3,"sources":["routes/About.js","components/Movie.js","routes/Home.js","routes/Detail.js","components/Navigation.js","App.js","index.js"],"names":["About","className","Movie","year","title","summary","poster","genres","to","pathname","state","src","alt","map","genre","index","key","slice","Home","isLoading","movies","getMovies","a","axios","get","data","setState","this","movie","id","medium_cover_image","React","Component","Detail","console","log","props","location","history","undefined","push","Navigation","App","path","exact","component","ReactDOM","render","document","getElementById"],"mappings":"8TAeeA,MAZf,WACE,OACE,yBAAKC,UAAU,oBACb,8IAIA,8D,wFCqCSC,MA1Cf,YAA0D,IAAzCC,EAAwC,EAAxCA,KAAMC,EAAkC,EAAlCA,MAAOC,EAA2B,EAA3BA,QAASC,EAAkB,EAAlBA,OAAQC,EAAU,EAAVA,OAC7C,OACE,kBAAC,IAAD,CACEC,GAAI,CACFC,SAAU,gBACVC,MAAO,CACLP,OACAC,QACAC,UACAC,SACAC,YAIJ,yBAAKN,UAAU,SACb,yBAAKU,IAAKL,EAAQM,IAAKR,EAAOA,MAAOA,IACrC,yBAAKH,UAAU,eACb,wBAAIA,UAAU,gBAAgBG,GAC9B,wBAAIH,UAAU,eAAeE,GAC7B,wBAAIF,UAAU,iBACXM,EAAOM,KAAI,SAACC,EAAOC,GAAR,OACV,wBAAIC,IAAKD,EAAOd,UAAU,iBACvBa,OAIP,uBAAGb,UAAU,iBAAiBI,EAAQY,MAAM,EAAG,KAA/C,WC4BKC,G,iNArDbR,MAAQ,CACNS,WAAW,EACXC,OAAQ,I,EAGVC,U,sBAAY,8BAAAC,EAAA,sEAKAC,IAAMC,IACd,4DANQ,gBAGEJ,EAHF,EAERK,KACEA,KAAQL,OAKZ,EAAKM,SAAS,CAAEN,SAAQD,WAAW,IARzB,2C,mFAeVQ,KAAKN,c,+BAGG,IAAD,EACuBM,KAAKjB,MAA3BS,EADD,EACCA,UAAWC,EADZ,EACYA,OAEnB,OACE,6BAASnB,UAAU,aAChBkB,EACC,yBAAKlB,UAAU,UACb,0BAAMA,UAAU,gBAAhB,eAGF,yBAAKA,UAAU,UACZmB,EAAOP,KAAI,SAACe,GAAD,OACV,kBAAC,EAAD,CACEZ,IAAKY,EAAMC,GACXA,GAAID,EAAMC,GACV1B,KAAMyB,EAAMzB,KACZC,MAAOwB,EAAMxB,MACbC,QAASuB,EAAMvB,QACfC,OAAQsB,EAAME,mBACdvB,OAAQqB,EAAMrB,kB,GA3CXwB,IAAMC,YCcVC,E,4LAfXC,QAAQC,IAAIR,KAAKS,OADC,MAEYT,KAAKS,MAA3BC,EAFU,EAEVA,SAAUC,EAFA,EAEAA,aACKC,IAAnBF,EAAS3B,OACX4B,EAAQE,KAAK,O,+BAGP,IACAH,EAAaV,KAAKS,MAAlBC,SACR,OAAIA,EAAS3B,MACJ,8BAAO2B,EAAS3B,MAAMN,OAEtB,S,GAbQ2B,IAAMC,W,MCWZS,MATf,WACE,OACE,yBAAKxC,UAAU,OACb,kBAAC,IAAD,CAAMO,GAAG,KAAT,QACA,kBAAC,IAAD,CAAMA,GAAG,UAAT,W,MCuBSkC,MArBf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAO,EAAMC,UAAW3B,IACxC,kBAAC,IAAD,CAAOyB,KAAK,SAASE,UAAW7C,IAChC,kBAAC,IAAD,CAAO2C,KAAK,gBAAgBE,UAAWZ,MCZ7Ca,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.2b7d0214.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./About.css\";\r\n\r\nfunction About() {\r\n  return (\r\n    <div className=\"about__container\">\r\n      <span>\r\n        “Freedom is the freedom to say that two plus two make four. If that is\r\n        granted, all else follows.”\r\n      </span>\r\n      <span>− George Orwell, 1984</span>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default About;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./Movie.css\";\r\n\r\nfunction Movie({ year, title, summary, poster, genres }) {\r\n  return (\r\n    <Link\r\n      to={{\r\n        pathname: \"/movie-detail\",\r\n        state: {\r\n          year,\r\n          title,\r\n          summary,\r\n          poster,\r\n          genres,\r\n        },\r\n      }}\r\n    >\r\n      <div className=\"movie\">\r\n        <img src={poster} alt={title} title={title} />\r\n        <div className=\"movie__data\">\r\n          <h3 className=\"movie__title\">{title}</h3>\r\n          <h5 className=\"movie__year\">{year}</h5>\r\n          <ul className=\"movie__genres\">\r\n            {genres.map((genre, index) => (\r\n              <li key={index} className=\"genres__genre\">\r\n                {genre}\r\n              </li>\r\n            ))}\r\n          </ul>\r\n          <p className=\"movie_summary\">{summary.slice(0, 180)}...</p>\r\n        </div>\r\n      </div>\r\n    </Link>\r\n  );\r\n}\r\n\r\nMovie.propTypes = {\r\n  id: PropTypes.number.isRequired,\r\n  year: PropTypes.number.isRequired,\r\n  title: PropTypes.string.isRequired,\r\n  summary: PropTypes.string.isRequired,\r\n  poster: PropTypes.string.isRequired,\r\n  genres: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n};\r\n\r\nexport default Movie;\r\n\r\n// 이 경우에는 상상할 수 있다시피 movies component는 state를 필요로 하지 않느다.\r\n// 그래서 만약 component가 state가 필요 없을 경우 이게 class component가 될 필요는 없다.\r\n// 예를 들어 class App extends React.Component에서 React.Component를 필요로 하지 않는다.\r\n// 그래서 우리는 우리의 function component로 할거임\r\n// 표지 이미지, title, id, summary, poster를 가져옴\r\n// style={{backgroundColor:\"red\"}} 자바스크립트의 스타일(CSS) 방식\r\n// map function은 또 다른 argument를 준다.\r\n// 첫번째 인자는 현재의 아이템이고, 두번째 인자는 item number이다.\r\n","import React from \"react\";\r\nimport axios from \"axios\";\r\nimport Movie from \"../components/Movie\";\r\nimport \"./Home.css\";\r\n\r\nclass Home extends React.Component {\r\n  state = {\r\n    isLoading: true,\r\n    movies: [],\r\n  };\r\n\r\n  getMovies = async () => {\r\n    const {\r\n      data: {\r\n        data: { movies },\r\n      },\r\n    } = await axios.get(\r\n      \"https://yts-proxy.now.sh/list_movies.json?sort_by=rating\"\r\n    );\r\n    this.setState({ movies, isLoading: false });\r\n    // 하나는 setState의 movies이고, 다른 하나는 axios에서 온 movies이다.\r\n    // this.setState({moives:movies}); === this.setState({ movies });\r\n    // 자바스크립트는 같은 항목이란 것을 이해한다.\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.getMovies();\r\n  }\r\n\r\n  render() {\r\n    const { isLoading, movies } = this.state;\r\n    // 자바스크립트 Ex6문법 -> this.state에서 isLoading, movies를 가져온 것.\r\n    return (\r\n      <section className=\"container\">\r\n        {isLoading ? (\r\n          <div className=\"loader\">\r\n            <span className=\"loader__text\">Loading...</span>\r\n          </div>\r\n        ) : (\r\n          <div className=\"movies\">\r\n            {movies.map((movie) => (\r\n              <Movie\r\n                key={movie.id}\r\n                id={movie.id}\r\n                year={movie.year}\r\n                title={movie.title}\r\n                summary={movie.summary}\r\n                poster={movie.medium_cover_image}\r\n                genres={movie.genres}\r\n              />\r\n              // state안에 movies 배열안의 항목들 모두를 Movie 컴포넌트로 props 속성값들을 보냄\r\n              // map()은 항상 뭔가로 부터 return을 해야한다.\r\n            ))}\r\n          </div>\r\n        )}\r\n      </section>\r\n    );\r\n  }\r\n}\r\nexport default Home;\r\n// componentDidMount()로 data를 fetch 할꺼임\r\n// 그리고 API로 부터 data fetching이 완료되면\r\n// \"we are ready\" 대신에 movie를 Render하고 map을 만들고 moive를 render 하는 거임.\r\n// 내가 state를 쓰는 건 자유! 굳이 state 안에 초기값을 선언할 필요는 없음\r\n// 일반적으로 javascript에서 data를 fetch하는 방법은 fetch를 사용하는 것\r\n// 하지만 더 좋은 방법으로 Axios라고 부르는 것이 있다.\r\n// 우리는 axios로 부터 온 data를 잡을 필요가 있다.\r\n// 왜냐하면 axios가 안에 있는 데이터를 우리에게 주기 때문이다.\r\n// 그렇기 때문에 우리는 그 데이터를 잡을 필요가 있다.\r\n// 그래야 state에서 사용할 수 있기 때문이다.\r\n// 잠시 기다려야해 axios.get은 항상 빠르지 않아\r\n// 우리는 javascript에게 componentDidMount 함수가 끝날 때까지\r\n// 약간 시간이 걸릴 수 있다고 말해야 한다.\r\n// 그걸 위해 우리는 componentDidMount 앞에 async를 넣을거야\r\n// async()는 비동기를 의미하고, \"너는 이걸 기다려야 해\" 라는 말이다.\r\n// 함수 내부에서는 \"내가 뭘 기다리길 원해\"? axios?\r\n// axios가 끝날 때까지 기다렸다가 계속하라는 의미이다.\r\n// 즉, application은 render하고, 처음에는 isLoading:true\r\n// application이 mount된 후, 우리는 getMovies function을 호출\r\n// getMovies는 axios.get을 사용해 하지만 axios.get은 완료되기 까지 시간이 필요하기 때문에 await을 넣었음\r\n// 만약 async를 사용하지 않는다면 await을 사용할 수 없다.\r\n// async await을 하는 것은 우리가 기본적으로 javascript에게\r\n// getMovies function에게 조금 시간이 필요하고 우리는 그걸 기다려야 한다는 것을 말하는 것임\r\n// import \"./App.css\";를 함으로서, 각 태그의 class 이름을 해당 css 파일에서 쓸 수 있음.\r\n// 태그에 className을 쓰는 이유는 React의 javascript안에서 class는 class App extends React.Component 와 같이\r\n// 컴포넌트 class로 인식을 해버리기 때문에, class 대신에 ClassName으로 써줘야 React가 혼동하지 않는다.\r\n// 하지만, HTML에서의 class는 그냥 class이므로 className을 사용할 필요는 없다.\r\n","import React from \"react\";\r\n\r\nclass Detail extends React.Component {\r\n  componentDidMount() {\r\n    console.log(this.props);\r\n    const { location, history } = this.props;\r\n    if (location.state === undefined) {\r\n      history.push(\"/\");\r\n    } // history를 사용한 이유는 url를 통해 /movie-detail를 검색해서 들어가는 것을 막기 위해 사용함 -> 검색해서 들어가면 Home 컴포넌트 화면이 나옴\r\n  }\r\n  render() {\r\n    const { location } = this.props;\r\n    if (location.state) {\r\n      return <span>{location.state.title}</span>;\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n}\r\nexport default Detail;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./Navigation.css\";\r\n\r\nfunction Navigation() {\r\n  return (\r\n    <div className=\"nav\">\r\n      <Link to=\"/\">Home</Link>\r\n      <Link to=\"/about\">About</Link>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Navigation;\r\n","import React from \"react\";\nimport { HashRouter, Route } from \"react-router-dom\";\nimport About from \"./routes/About\";\n// import {About as Potato} from \"./routes/About\";\n// <Route path=\"/about\" component={Potato} />\nimport Home from \"./routes/Home\";\nimport Detail from \"./routes/Detail\";\nimport Navigation from \"./components/Navigation\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <HashRouter>\n      <Navigation />\n      <Route path=\"/\" exact={true} component={Home} />\n      <Route path=\"/about\" component={About} />\n      <Route path=\"/movie-detail\" component={Detail} />\n    </HashRouter>\n  );\n}\n// App 컴포넌트는 url과 관련된 소스\n// 만약 path로 가면 component를 보여줘 라는 의미\n// <HashRouter>태그 안에 Route를 만들고, 그 다음 Route안에는 스크린을 넣을 수 있다.\n// 그래서 원하는 만큼 path를 만들 수 있다.\n// Route태그 안에 속성 path=\"/about\" 이름과 component={About} 속성 이름이 같지 않아도 상관없다.\n// url에서 path에 해당하는 부분에 about을 검색하면 해당 컴포넌트로 화면으로 이동하는 것을 확인할 수 있다.\n// reacte Route는 모든 url를 순서대로 렌더링을 해버려서 화면에 켭쳐서 보이게 됨\n// 이것을 고치는 방법은 exact={true}를 첫번째 Route에 추가해버리는 것\n// 그래서 오직 너의 url일 때만, home을 렌더링하라는 명령을 할수 있게 됨.\n// 만약 url에 /somethig을 검색한다면 그것을 무시해버림 즉, exact={true}이 들어간 것만 인식하게 됨\n// <Navigation /> 컴포넌트 안에 있는 Link를 사용하고 싶으면, <HashRouter>태그 안에 있어야 한다.\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}